diff --git a/pico/mac/commands.c b/pico/mac/commands.c
index 938fd5a3..3834d47c 100644
--- a/pico/mac/commands.c
+++ b/pico/mac/commands.c
@@ -86,6 +86,8 @@ void set_num_dcd();
 #define STOP_BITS 1
 #define PARITY UART_PARITY_NONE
 
+#include "mac_ndev.h"
+
 void setup_esp_uart()
 {
     uart_init(UART_ID, BAUD_RATE);
@@ -897,22 +899,25 @@ void dcd_read(uint8_t ntx)
   {
     // printf("sending sector %06x in %d groups\n", sector, ntx);
     
-    uart_putc_raw(UART_ID, 'R');
-    uart_putc_raw(UART_ID, (sector >> 16) & 0xff);
-    uart_putc_raw(UART_ID, (sector >> 8) & 0xff);
-    uart_putc_raw(UART_ID, sector & 0xff);
-    sector++;
-
     memset(payload, 0, sizeof(payload));
     payload[0] = 0x80;
     payload[1] = num_sectors-i;
 
-    uart_read_blocking(UART_ID, &payload[26], 512);
-    for (int x=0; x<16; x++)
-    {
-      printf("%02x ", payload[26+x]);
+    if (not_mac_ndev_read(active_disk_number, sector, &payload[6], &payload[26])) {
+        uart_putc_raw(UART_ID, 'R');
+        uart_putc_raw(UART_ID, (sector >> 16) & 0xff);
+        uart_putc_raw(UART_ID, (sector >> 8) & 0xff);
+        uart_putc_raw(UART_ID, sector & 0xff);
+
+        uart_read_blocking(UART_ID, &payload[26], 512);
+        /*for (int x=0; x<16; x++)
+        {
+          printf("%02x ", payload[26+x]);
+        }
+        printf("\n");*/
     }
-    printf("\n");
+    sector++;
+
     compute_checksum(538);
 
     send_packet(ntx);
@@ -976,33 +981,36 @@ OR
   else
   {
     sector = (payload[2] << 16) + (payload[3] << 8) + payload[4];
     printf("write %06x sectors\n", sector);
   }
 
-  ///  TODO FROM HERE CHANGE FROM READ TO WRITE
+  if (not_mac_ndev_write(active_disk_number, sector, &payload[6], &payload[26])) {
+      ///  TODO FROM HERE CHANGE FROM READ TO WRITE
 
-  // clear out UART buffer cause there was a residual byte
-  while(uart_is_readable(UART_ID))
-    uart_getc(UART_ID);
+      // clear out UART buffer cause there was a residual byte
+      while(uart_is_readable(UART_ID))
+        uart_getc(UART_ID);
 
-  // printf("writing sector %06x in %d groups\n", sector, ntx);
+      // printf("writing sector %06x in %d groups\n", sector, ntx);
 
-  uart_putc_raw(UART_ID, 'W');
-  uart_putc_raw(UART_ID, (sector >> 16) & 0xff);
-  uart_putc_raw(UART_ID, (sector >> 8) & 0xff);
-  uart_putc_raw(UART_ID, sector & 0xff);
+      uart_putc_raw(UART_ID, 'W');
+      uart_putc_raw(UART_ID, (sector >> 16) & 0xff);
+      uart_putc_raw(UART_ID, (sector >> 8) & 0xff);
+      uart_putc_raw(UART_ID, sector & 0xff);
+      uart_write_blocking(UART_ID, &payload[26], 512);
+      // for (int x=0; x<512; x++)
+      // {
+      //   printf("%02x ", payload[26+x]);
+      // }
+      while (!uart_is_readable(UART_ID))
+        ;
+      c = uart_getc(UART_ID);
+      if (c=='e')
+        printf("\nMac WROTE TO READONLY DISK!\n");
+      // assert(c=='w'); // error handling?
+  }
   sector++;
-  uart_write_blocking(UART_ID, &payload[26], 512);
-  // for (int x=0; x<512; x++)
-  // {
-  //   printf("%02x ", payload[26+x]);
-  // }
-  while (!uart_is_readable(UART_ID))
-    ;
-  c = uart_getc(UART_ID);
-  if (c=='e')
-    printf("\nMac WROTE TO READONLY DISK!\n");
-  // assert(c=='w'); // error handling?
+
   // response packet
   memset(payload, 0, sizeof(payload));
   payload[0] = (!verf) ? 0x81 : 0x82;
